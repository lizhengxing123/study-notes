{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// 上架的 NFT 价格必须大于 0\nerror NftMarketplace__PriceMustBeAboveZero();\n// 当前 NFT 没有给市场合约批准\nerror NftMarketplace__NotApprovedForMarketplace();\n// NFT 已经上架了\nerror NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);\n// NFT 还没有上架\nerror NftMarketplace__NotListed(address nftAddress, uint256 tokenId);\n// 不是当前 NFT 的所有者\nerror NftMarketplace__NotOwner();\n// 购买 NFT 的金额不足\nerror NftMarketplace__NotPayEnough(\n    address nftAddress,\n    uint256 tokenId,\n    uint256 nftPrice,\n    uint256 actualPrice\n);\n// 没有收益\nerror NftMarketplace__NoProceeds();\n// 提取收益失败\nerror NftMarketplace__TransferFailed();\n\n/**\n * @title NFT 交易市场\n * @author Zhengxing Li\n * @notice 提供 NFT 的上架、下架、购买、更新和提取收益功能\n * @dev 需要防止重入攻击\n */\ncontract NftMarketplace {\n    // NFT 出售对象\n    struct Listing {\n        uint256 price; // 价格\n        address seller; // 卖家\n    }\n\n    // NFT 合约地址 -> NFT TokenId -> NFT 出售对象\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    // 卖家 -> 已卖出的金额（收益）\n    mapping(address => uint256) private s_proceeds;\n\n    // 列表项增加\n    event ItemListed(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n    // 购买 NFT\n    event ItemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 nftPrice,\n        uint256 transactionPrice\n    );\n    // 下架 NFT\n    event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\n\n    // NFT 没有添加到市场\n    modifier notListed(address nftAddress, uint256 tokenId) {\n        // NFT 对象\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price > 0) {\n            // NFT 已经上架了\n            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    // NFT 已经添加到市场\n    modifier isListed(address nftAddress, uint256 tokenId) {\n        // NFT 对象\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price <= 0) {\n            // NFT 还没有上架\n            revert NftMarketplace__NotListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    // 是当前 NFT 的所有者\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address seller\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.ownerOf(tokenId) != seller) {\n            // 不是当前 NFT 的所有者\n            revert NftMarketplace__NotOwner();\n        }\n        _;\n    }\n\n    /**\n     * @notice 这个方法用于将你的 NFT 上架到市场\n     * @dev 上架，只能外部调用\n     * @dev 使用了 getApproved 方法，授予当前合约去出售卖家的 NFT\n     * @param nftAddress NFT 合约地址\n     * @param tokenId NFT tokenId\n     * @param price NFT 价格\n     */\n    function listItem(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    ) external notListed(nftAddress, tokenId) isOwner(nftAddress, tokenId, msg.sender) {\n        if (price <= 0) {\n            // 上架的 NFT 价格必须大于 0\n            revert NftMarketplace__PriceMustBeAboveZero();\n        }\n        // NFT 的所有者可以给市场（当前合约）批准，去出售他们的 NFT\n        // 需要调用 IERC721 里面的 getApproved\n        IERC721 nft = IERC721(nftAddress);\n        // 判断是否已经批准当前合约\n        if (nft.getApproved(tokenId) != address(this)) {\n            // 当前 NFT 没有给市场合约批准\n            revert NftMarketplace__NotApprovedForMarketplace();\n        }\n        // 保存数据\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\n        // 触发事件\n        emit ItemListed(msg.sender, nftAddress, tokenId, price);\n    }\n\n    /**\n     * @notice 这个方法用于购买市场上的 NFT\n     * @dev 外部调用，并且需要支付\n     * @dev 需要防止重入攻击\n     * @dev 方法一：检查-生效-交互（Checks-Effects-Interactions）模式\n     * @dev 方法二：互斥锁 => openzeppelin\n     * @param nftAddress NFT 合约地址\n     * @param tokenId NFT tokenId\n     */\n    function buyItem(address nftAddress, uint256 tokenId)\n        external\n        payable\n        /** nonReentrant 互斥锁修饰符 */\n        isListed(nftAddress, tokenId)\n    {\n        // NFT 对象\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price > msg.value) {\n            // 购买 NFT 的金额不足\n            revert NftMarketplace__NotPayEnough(nftAddress, tokenId, listing.price, msg.value);\n        }\n        // 更新卖家的收益\n        s_proceeds[listing.seller] += msg.value;\n        // 删除列表里的这个NFT -- 检查-生效-交互模式\n        delete (s_listings[nftAddress][tokenId]);\n        // 转移 NFT - 可能会有重入攻击\n        IERC721(nftAddress).safeTransferFrom(listing.seller, msg.sender, tokenId);\n        // 触发事件\n        emit ItemBought(msg.sender, nftAddress, tokenId, listing.price, msg.value);\n    }\n\n    /**\n     * @notice 这个方法用于下架你的 NFT\n     * @param nftAddress NFT 合约地址\n     * @param tokenId NFT tokenId\n     */\n    function cancelListing(address nftAddress, uint256 tokenId)\n        external\n        isListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        // 删除列表里的这个NFT\n        delete (s_listings[nftAddress][tokenId]);\n        // 触发事件\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\n    }\n\n    /**\n     * @notice 这个方法用于更新你的 NFT 的价格\n     * @param nftAddress NFT 合约地址\n     * @param tokenId NFT tokenId\n     * @param newPrice 新的价格\n     */\n    function updateListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    ) external isListed(nftAddress, tokenId) isOwner(nftAddress, tokenId, msg.sender) {\n        s_listings[nftAddress][tokenId].price = newPrice;\n        // 触发事件 -- 重新列出来就可以\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\n    }\n\n    /**\n     * @notice 这个方法用于卖家提取收益\n     * @dev 防止重入攻击\n     * @dev 方法一：检查-生效-交互（Checks-Effects-Interactions）模式\n     * @dev 方法二：互斥锁 => openzeppelin\n     */\n    function withdrawProceeds() external {\n        // 收益\n        uint256 proceeds = s_proceeds[msg.sender];\n        if (proceeds <= 0) {\n            // 没有收益\n            revert NftMarketplace__NoProceeds();\n        }\n        s_proceeds[msg.sender] = 0;\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\n        if (!success) {\n            // 提取失败\n            revert NftMarketplace__TransferFailed();\n        }\n    }\n\n    /**\n     * @notice 这个方法用于获取市场上的 NFT\n     * @param nftAddress NFT 合约地址\n     * @param tokenId NFT tokenId\n     */\n    function getListing(address nftAddress, uint256 tokenId) public view returns (Listing memory) {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    /**\n     * @notice 这个方法用于获取卖家的收益\n     */\n    function getProceeds(address seller) public view returns (uint256) {\n        return s_proceeds[seller];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}