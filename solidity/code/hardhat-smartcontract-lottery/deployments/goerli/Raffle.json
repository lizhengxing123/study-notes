{
  "address": "0xD3409dBc641aA24cfEceBebF73543152795fEC32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualInterval",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d4e4fa33f0920794590a0efcf551e6d161b0b303144db16d2679312d5919d69",
  "receipt": {
    "to": null,
    "from": "0xA47C311F7A9Ed6Dab0e10a990696631937912db9",
    "contractAddress": "0xD3409dBc641aA24cfEceBebF73543152795fEC32",
    "transactionIndex": 63,
    "gasUsed": "1289531",
    "logsBloom": "0x
    "blockHash": "0xcda2ee759edfcfeda1252c2790984fbeec9a5596664848359ef4312b2b72b347",
    "transactionHash": "0x6d4e4fa33f0920794590a0efcf551e6d161b0b303144db16d2679312d5919d69",
    "logs": [],
    "blockNumber": 7890776,
    "cumulativeGasUsed": "11011636",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "6029",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "bd623ca71626cd8d9a3681daba6ab008",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualInterval\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Li Zhengxing\",\"details\":\"\\u4f7f\\u7528\\u4e86 chainlink VRF & Keeper\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"keeper\\u7528\\u6237\\u5408\\u7ea6\\u4e2d\\u9700\\u8981\\u91cd\\u5199\\u7684\\u51fd\\u6570\\uff0c\\u7528\\u6765\\u8868\\u793a\\u81ea\\u52a8\\u5316\\u6267\\u884c\\u7684\\u6761\\u4ef6 \\u5224\\u65ad\\u6761\\u4ef6\\u4e3a\\uff1a 1\\u3001\\u8d85\\u8fc7\\u5b9a\\u7684\\u56fa\\u5b9a\\u65f6\\u95f4\\u6bb5 2\\u3001\\u81f3\\u5c11\\u6709\\u4e00\\u540d\\u73a9\\u5bb6\\uff0c\\u5e76\\u4e14\\u6709 ETH 3\\u3001\\u8ba2\\u9605\\u91cc\\u9762\\u5e94\\u8be5\\u6709\\u8db3\\u591f\\u7684 LINK 4\\u3001\\u62bd\\u5956\\u7684\\u72b6\\u6001\\u5e94\\u8be5\\u662f\\u201cOpen\\u201d\"},\"performUpkeep(bytes)\":{\"details\":\"keeper\\u7528\\u6237\\u5408\\u7ea6\\u4e2d\\u9700\\u8981\\u91cd\\u5199\\u7684\\u51fd\\u6570\\uff0cupkeepNeeded\\u4e3a\\u771f\\u65f6\\uff0c\\u4f1a\\u6267\\u884c\\u4ee5\\u4e0b\\u903b\\u8f91 \\u9009\\u62e9\\u968f\\u673a\\u83b7\\u80dc\\u8005 -- chainlink vrf\"}},\"title\":\"\\u62bd\\u5956\\u5408\\u7ea6\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u8fd9\\u4e2a\\u5408\\u7ea6\\u7528\\u4e8e\\u521b\\u5efa\\u4e00\\u4e2a\\u533a\\u4e2d\\u5fc3\\u5316\\u7684\\u667a\\u80fd\\u5408\\u7ea6\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// \\u4e70\\u5f69\\u7968\\n// \\u968f\\u673a\\u9009\\u62e9\\u4e00\\u4e2a\\u4eba\\u4e2d\\u5956 - vrf\\n// \\u6bcf\\u9694\\u4e00\\u6bb5\\u65f6\\u95f4\\uff0c\\u81ea\\u52a8\\u9009\\u62e9\\u4e00\\u4e2a\\u4eba\\u4e2d\\u5956 - keeper\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n/* Import */\\n// vrf \\u9700\\u8981\\u7684\\u6587\\u4ef6\\n// VRF\\u7528\\u6237\\u5408\\u7ea6 - \\u9700\\u8981\\u7ee7\\u627f\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// \\u534f\\u4f5c\\u5408\\u7ea6 - \\u6211\\u4eec\\u81ea\\u5df1\\u7684\\u5408\\u7ea6\\u9700\\u8981\\u8c03\\u7528\\u534f\\u4f5c\\u5408\\u7ea6\\u91cc\\u7684\\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u51fd\\u6570\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n// keeper\\u9700\\u8981\\u7684\\u5408\\u7ea6\\n// VRF\\u7528\\u6237\\u5408\\u7ea6 - \\u9700\\u8981\\u7ee7\\u627f\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/* Errors */\\n// \\u52a0\\u5165\\u62bd\\u5956\\u7684\\u94b1\\u4e0d\\u591f\\nerror Raffle__NotEnoughETHEntered();\\n// \\u7ed9\\u8d62\\u5bb6\\u8f6c\\u8d26\\u5931\\u8d25\\nerror Raffle__TransferFailed();\\n// \\u62bd\\u5956\\u72b6\\u6001\\u4e0d\\u662fopen\\nerror Raffle__NotOpen();\\n// keeper\\u68c0\\u67e5\\u6761\\u4ef6\\u4e0d\\u4e3a\\u771f\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState,\\n    uint256 actualInterval\\n);\\n\\n/**\\n * @title \\u62bd\\u5956\\u5408\\u7ea6\\n * @author Li Zhengxing\\n * @notice \\u8fd9\\u4e2a\\u5408\\u7ea6\\u7528\\u4e8e\\u521b\\u5efa\\u4e00\\u4e2a\\u533a\\u4e2d\\u5fc3\\u5316\\u7684\\u667a\\u80fd\\u5408\\u7ea6\\n * @dev \\u4f7f\\u7528\\u4e86 chainlink VRF & Keeper\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* \\u7c7b\\u578b\\u58f0\\u660e */\\n    enum RaffleState {\\n        OPEN, // \\u6253\\u5f00 - 0\\n        CALCULATEING // \\u8ba1\\u7b97\\u4e2d - 1\\n    }\\n\\n    /* \\u72b6\\u6001\\u53d8\\u91cf */\\n    // \\u5165\\u573a\\u8d39\\n    uint256 private immutable i_entranceFee;\\n    // \\u73a9\\u5bb6 -- \\u53ef\\u652f\\u4ed8\\u5730\\u5740\\uff0c\\u73a9\\u5bb6\\u83b7\\u80dc\\u9700\\u8981\\u652f\\u4ed8ETH\\n    address payable[] private s_players;\\n    // vrf\\u534f\\u4f5c\\u5408\\u7ea6\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u53c2\\u6570 - ketHash\\n    bytes32 private immutable i_gasLane;\\n    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u53c2\\u6570 - \\u8ba2\\u9605id\\n    uint64 private immutable i_subscriptionId;\\n    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u53c2\\u6570 - \\u63a5\\u6536\\u968f\\u673a\\u6570\\u7684 gas limit\\n    uint32 private immutable i_callbackGasLimit;\\n    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u53c2\\u6570 - \\u8bf7\\u6c42\\u786e\\u8ba4\\u533a\\u5757\\u6570\\u91cf\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    // \\u8bf7\\u6c42\\u968f\\u673a\\u6570\\u53c2\\u6570 - \\u9700\\u8981\\u83b7\\u53d6\\u7684\\u968f\\u673a\\u6570\\u4e2a\\u6570\\n    uint32 private constant NUM_WORDS = 1;\\n    // \\u6700\\u8fd1\\u8d62\\u5bb6\\n    address payable private s_recentWinner;\\n    // \\u62bd\\u5956\\u72b6\\u6001\\n    RaffleState private s_raffleState;\\n    // \\u62bd\\u5956\\u5f00\\u59cb\\u65f6\\u95f4\\n    uint256 private s_lastTimeStamp;\\n    // \\u5f00\\u5956\\u95f4\\u9694\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n    // \\u52a0\\u5165\\u62bd\\u5956\\n    event RaffleEnter(address indexed player);\\n    // \\u8bf7\\u6c42\\u4e86\\u4e00\\u4e2a\\u968f\\u673a\\u6570\\uff0c\\u62bd\\u5956\\u8d62\\u5bb6\\u8bde\\u751f\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    // \\u5386\\u5c4a\\u7684\\u83b7\\u80dc\\u8005\\n    event WinnerPicked(address indexed winner);\\n\\n    /* Funcions */\\n    // \\u90e8\\u7f72\\u5408\\u7ea6\\u65f6\\u8bbe\\u5b9a\\u5165\\u573a\\u8d39\\uff0c\\u5e76\\u4e14\\u4f20\\u9012vrfCoordinator\\u5408\\u7ea6\\u5730\\u5740\\n    constructor(\\n        address vrfCoordinator,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_interval = interval;\\n        s_raffleState = RaffleState.OPEN; // \\u76f8\\u5f53\\u4e8e RaffleState(0)\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // \\u52a0\\u5165\\u62bd\\u5956 -- \\u516c\\u5f00\\u7684\\uff0c\\u53ef\\u652f\\u4ed8\\u7684\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        // \\u6dfb\\u52a0\\u73a9\\u5bb6 -- \\u5c06\\u5730\\u5740\\u8f6c\\u6362\\u4e3a address payable\\n        s_players.push(payable(msg.sender));\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev keeper\\u7528\\u6237\\u5408\\u7ea6\\u4e2d\\u9700\\u8981\\u91cd\\u5199\\u7684\\u51fd\\u6570\\uff0c\\u7528\\u6765\\u8868\\u793a\\u81ea\\u52a8\\u5316\\u6267\\u884c\\u7684\\u6761\\u4ef6\\n     * \\u5224\\u65ad\\u6761\\u4ef6\\u4e3a\\uff1a\\n     * 1\\u3001\\u8d85\\u8fc7\\u5b9a\\u7684\\u56fa\\u5b9a\\u65f6\\u95f4\\u6bb5\\n     * 2\\u3001\\u81f3\\u5c11\\u6709\\u4e00\\u540d\\u73a9\\u5bb6\\uff0c\\u5e76\\u4e14\\u6709 ETH\\n     * 3\\u3001\\u8ba2\\u9605\\u91cc\\u9762\\u5e94\\u8be5\\u6709\\u8db3\\u591f\\u7684 LINK\\n     * 4\\u3001\\u62bd\\u5956\\u7684\\u72b6\\u6001\\u5e94\\u8be5\\u662f\\u201cOpen\\u201d\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upkeepNeeded = (timePassed && isOpen && hasPlayers && hasBalance);\\n    }\\n\\n    /**\\n     * @dev keeper\\u7528\\u6237\\u5408\\u7ea6\\u4e2d\\u9700\\u8981\\u91cd\\u5199\\u7684\\u51fd\\u6570\\uff0cupkeepNeeded\\u4e3a\\u771f\\u65f6\\uff0c\\u4f1a\\u6267\\u884c\\u4ee5\\u4e0b\\u903b\\u8f91\\n     * \\u9009\\u62e9\\u968f\\u673a\\u83b7\\u80dc\\u8005 -- chainlink vrf\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        // \\u6761\\u4ef6\\u5224\\u65ad\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState),\\n                (block.timestamp - s_lastTimeStamp)\\n            );\\n        }\\n        // \\u6539\\u53d8\\u72b6\\u6001\\n        s_raffleState = RaffleState.CALCULATEING;\\n        // \\u8bf7\\u6c42\\u968f\\u673a\\u6570 -- \\u8fd9\\u4e2a\\u51fd\\u6570\\u8c03\\u7528\\u4e5f\\u4f1a\\u89e6\\u53d1\\u4e8b\\u4ef6\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    // \\u83b7\\u53d6\\u8bf7\\u6c42\\u56de\\u6765\\u7684\\u968f\\u673a\\u6570\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // \\u5229\\u7528\\u53d6\\u4f59\\u6765\\u786e\\u5b9a\\u8d62\\u5bb6\\u7684index\\n        // \\u6570\\u5b57\\u4e0e2\\u53d6\\u4f59\\uff0c\\u5f97\\u5230\\u7684\\u503ckennel\\u4e3a0\\uff0c1\\n        // \\u6570\\u5b57\\u4e0e3\\u53d6\\u4f59\\uff0c\\u5f97\\u5230\\u7684\\u503ckennel\\u4e3a0\\uff0c1\\uff0c2\\n        // \\u6570\\u5b57\\u4e0e4\\u53d6\\u4f59\\uff0c\\u5f97\\u5230\\u7684\\u503ckennel\\u4e3a0\\uff0c1\\uff0c2\\uff0c3\\n        // ...\\n        // \\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u5f97\\u5230\\u7684\\u968f\\u673a\\u6570\\u4e0e\\u73a9\\u5bb6\\u6570\\u7ec4\\u7684\\u957f\\u5ea6\\u8fdb\\u884c\\u53d6\\u4f59\\n        // \\u5f97\\u5230\\u4e00\\u4e2a\\u503c\\uff0c\\u8fd9\\u4e2a\\u503c\\u5c31\\u662f\\u6570\\u7ec4\\u7684\\u4e0b\\u6807\\uff0c\\u5c31\\u53ef\\u4ee5\\u9009\\u51fa\\u83b7\\u80dc\\u7684\\u73a9\\u5bb6\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        // \\u6700\\u8fd1\\u7684\\u83b7\\u80dc\\u8005\\n        s_recentWinner = s_players[indexOfWinner];\\n        // \\u6539\\u53d8\\u72b6\\u6001\\n        s_raffleState = RaffleState.OPEN;\\n        // \\u6539\\u53d8\\u65f6\\u95f4\\n        s_lastTimeStamp = block.timestamp;\\n        // \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u7ec4\\n        s_players = new address payable[](0);\\n        // \\u7ed9\\u6700\\u8fd1\\u7684\\u83b7\\u80dc\\u8005\\u53d1\\u9001ETH\\n        (bool success, ) = s_recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(s_recentWinner);\\n    }\\n\\n    /* view / pure Functions */\\n    // \\u83b7\\u53d6\\u5165\\u573a\\u8d39\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    // \\u83b7\\u53d6\\u65f6\\u95f4\\u95f4\\u9694\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    // \\u83b7\\u53d6\\u534f\\u4f5c\\u5408\\u7ea6\\n    function getVrfCoordinator() public view returns (VRFCoordinatorV2Interface) {\\n        return i_vrfCoordinator;\\n    }\\n\\n    // \\u83b7\\u53d6\\u67d0\\u4e2a\\u73a9\\u5bb6\\n    function getPlayer(uint256 index) public view returns (address payable) {\\n        return s_players[index];\\n    }\\n\\n    // \\u83b7\\u53d6\\u73a9\\u5bb6\\u6570\\u91cf\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    // \\u83b7\\u53d6\\u6700\\u8fd1\\u8d62\\u5bb6\\n    function getRecentWinner() public view returns (address payable) {\\n        return s_recentWinner;\\n    }\\n\\n    // \\u83b7\\u53d6\\u62bd\\u5956\\u72b6\\u6001\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    // \\u83b7\\u53d6\\u6700\\u8fd1\\u5f00\\u5956\\u65f6\\u95f4\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    // \\u83b7\\u53d6\\u62bd\\u5956\\u72b6\\u6001 -- \\u5e38\\u91cf\\u4f7f\\u7528pure\\n    function getNumWords() public pure returns (uint32) {\\n        return NUM_WORDS;\\n    }\\n\\n    // \\u83b7\\u53d6\\u786e\\u8ba4\\u533a\\u5757 -- \\u5e38\\u91cf\\u4f7f\\u7528pure\\n    function getRequestConfirmations() public pure returns (uint16) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0xe0a2b65e47a81e047cc6de39d7bdda63376329a6b607e6ff0b85f0839a8c8406\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200199938038062001999833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508061014081815250506000600160146101000a81548160ff0219169083600181111562000116576200011562000330565b5b0217905550426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516115c3620003d66000396000818161081501526108bd01526000610718015260006106f5015260006106d4015260008181610368015261069801526000818161034001526104650152600081816103a501526103f901526115c36000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063e55ae4e8146102a9578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e25780630cb4a29d1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c6e565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d08565b60405180910390f35b34801561014457600080fd5b5061014d61038c565b60405161015a9190610d9a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610f4e565b6103a3565b005b610194610463565b005b3480156101a257600080fd5b506101bd60048036038101906101b89190611005565b6105d2565b005b3480156101cb57600080fd5b506101d46107d1565b6040516101e19190611073565b60405180910390f35b3480156101f657600080fd5b506101ff6107fb565b60405161020c91906110ad565b60405180910390f35b34801561022157600080fd5b5061022a610804565b60405161023791906110e5565b60405180910390f35b34801561024c57600080fd5b50610267600480360381019061026291906111b5565b61080d565b604051610275929190611298565b60405180910390f35b34801561028a57600080fd5b506102936108b9565b6040516102a09190610c6e565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb91906112c8565b6108e1565b6040516102dd9190611073565b60405180910390f35b3480156102f257600080fd5b506102fb610928565b6040516103089190610c6e565b60405180910390f35b34801561031d57600080fd5b50610326610932565b6040516103339190610c6e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161044c929190611316565b60405180910390fd5b61045f828261093e565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104bd576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d1576104d0610d23565b5b600160149054906101000a900460ff1660018111156104f3576104f2610d23565b5b1461052a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105ec6040518060200160405280600081525061080d565b5090508061066a5747600080549050600160149054906101000a900460ff16600181111561061d5761061c610d23565b5b6002544261062b919061136e565b6040517f83a5369c00000000000000000000000000000000000000000000000000000000815260040161066194939291906113a2565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561068f5761068e610d23565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610759959493929190611423565b6020604051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c919061148b565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60006003905090565b6000606060007f000000000000000000000000000000000000000000000000000000000000000060025442610842919061136e565b119050600080600181111561085a57610859610d23565b5b600160149054906101000a900460ff16600181111561087c5761087b610d23565b5b1490506000806000805490501190506000804711905083801561089c5750825b80156108a55750815b80156108ae5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108f6576108f56114b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610959576109586114b8565b5b602002602001015161096b9190611516565b905060008181548110610981576109806114b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a1257610a11610d23565b5b021790555042600281905550600067ffffffffffffffff811115610a3957610a38610e0b565b5b604051908082528060200260200182016040528015610a675781602001602082028036833780820191505090505b5060009080519060200190610a7d929190610bae565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610ac690611578565b60006040518083038185875af1925050503d8060008114610b03576040519150601f19603f3d011682016040523d82523d6000602084013e610b08565b606091505b5050905080610b43576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610c27579160200282015b82811115610c265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bce565b5b509050610c349190610c38565b5090565b5b80821115610c51576000816000905550600101610c39565b5090565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610cce610cc9610cc484610c89565b610ca9565b610c89565b9050919050565b6000610ce082610cb3565b9050919050565b6000610cf282610cd5565b9050919050565b610d0281610ce7565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6357610d62610d23565b5b50565b6000819050610d7482610d52565b919050565b6000610d8482610d66565b9050919050565b610d9481610d79565b82525050565b6000602082019050610daf6000830184610d8b565b92915050565b6000604051905090565b600080fd5b600080fd5b610dd281610c55565b8114610ddd57600080fd5b50565b600081359050610def81610dc9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4382610dfa565b810181811067ffffffffffffffff82111715610e6257610e61610e0b565b5b80604052505050565b6000610e75610db5565b9050610e818282610e3a565b919050565b600067ffffffffffffffff821115610ea157610ea0610e0b565b5b602082029050602081019050919050565b600080fd5b6000610eca610ec584610e86565b610e6b565b90508083825260208201905060208402830185811115610eed57610eec610eb2565b5b835b81811015610f165780610f028882610de0565b845260208401935050602081019050610eef565b5050509392505050565b600082601f830112610f3557610f34610df5565b5b8135610f45848260208601610eb7565b91505092915050565b60008060408385031215610f6557610f64610dbf565b5b6000610f7385828601610de0565b925050602083013567ffffffffffffffff811115610f9457610f93610dc4565b5b610fa085828601610f20565b9150509250929050565b600080fd5b60008083601f840112610fc557610fc4610df5565b5b8235905067ffffffffffffffff811115610fe257610fe1610faa565b5b602083019150836001820283011115610ffe57610ffd610eb2565b5b9250929050565b6000806020838503121561101c5761101b610dbf565b5b600083013567ffffffffffffffff81111561103a57611039610dc4565b5b61104685828601610faf565b92509250509250929050565b600061105d82610c89565b9050919050565b61106d81611052565b82525050565b60006020820190506110886000830184611064565b92915050565b600063ffffffff82169050919050565b6110a78161108e565b82525050565b60006020820190506110c2600083018461109e565b92915050565b600061ffff82169050919050565b6110df816110c8565b82525050565b60006020820190506110fa60008301846110d6565b92915050565b600080fd5b600067ffffffffffffffff8211156111205761111f610e0b565b5b61112982610dfa565b9050602081019050919050565b82818337600083830152505050565b600061115861115384611105565b610e6b565b90508281526020810184848401111561117457611173611100565b5b61117f848285611136565b509392505050565b600082601f83011261119c5761119b610df5565b5b81356111ac848260208601611145565b91505092915050565b6000602082840312156111cb576111ca610dbf565b5b600082013567ffffffffffffffff8111156111e9576111e8610dc4565b5b6111f584828501611187565b91505092915050565b60008115159050919050565b611213816111fe565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611253578082015181840152602081019050611238565b60008484015250505050565b600061126a82611219565b6112748185611224565b9350611284818560208601611235565b61128d81610dfa565b840191505092915050565b60006040820190506112ad600083018561120a565b81810360208301526112bf818461125f565b90509392505050565b6000602082840312156112de576112dd610dbf565b5b60006112ec84828501610de0565b91505092915050565b600061130082610c89565b9050919050565b611310816112f5565b82525050565b600060408201905061132b6000830185611307565b6113386020830184611307565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137982610c55565b915061138483610c55565b925082820390508181111561139c5761139b61133f565b5b92915050565b60006080820190506113b76000830187610c5f565b6113c46020830186610c5f565b6113d16040830185610c5f565b6113de6060830184610c5f565b95945050505050565b6000819050919050565b6113fa816113e7565b82525050565b600067ffffffffffffffff82169050919050565b61141d81611400565b82525050565b600060a08201905061143860008301886113f1565b6114456020830187611414565b61145260408301866110d6565b61145f606083018561109e565b61146c608083018461109e565b9695505050505050565b60008151905061148581610dc9565b92915050565b6000602082840312156114a1576114a0610dbf565b5b60006114af84828501611476565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061152182610c55565b915061152c83610c55565b92508261153c5761153b6114e7565b5b828206905092915050565b600081905092915050565b50565b6000611562600083611547565b915061156d82611552565b600082019050919050565b600061158382611555565b915081905091905056fea26469706673582212202b03a36e0da244741a44a9ae472bb37e485c1a8a0eef628a648c633384b57f6e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063e55ae4e8146102a9578063f43b52cb146102e6578063fd6673f514610311576100dd565b806353a2c19a146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e25780630cb4a29d1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c6e565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d08565b60405180910390f35b34801561014457600080fd5b5061014d61038c565b60405161015a9190610d9a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610f4e565b6103a3565b005b610194610463565b005b3480156101a257600080fd5b506101bd60048036038101906101b89190611005565b6105d2565b005b3480156101cb57600080fd5b506101d46107d1565b6040516101e19190611073565b60405180910390f35b3480156101f657600080fd5b506101ff6107fb565b60405161020c91906110ad565b60405180910390f35b34801561022157600080fd5b5061022a610804565b60405161023791906110e5565b60405180910390f35b34801561024c57600080fd5b50610267600480360381019061026291906111b5565b61080d565b604051610275929190611298565b60405180910390f35b34801561028a57600080fd5b506102936108b9565b6040516102a09190610c6e565b60405180910390f35b3480156102b557600080fd5b506102d060048036038101906102cb91906112c8565b6108e1565b6040516102dd9190611073565b60405180910390f35b3480156102f257600080fd5b506102fb610928565b6040516103089190610c6e565b60405180910390f35b34801561031d57600080fd5b50610326610932565b6040516103339190610c6e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161044c929190611316565b60405180910390fd5b61045f828261093e565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104bd576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d1576104d0610d23565b5b600160149054906101000a900460ff1660018111156104f3576104f2610d23565b5b1461052a576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105ec6040518060200160405280600081525061080d565b5090508061066a5747600080549050600160149054906101000a900460ff16600181111561061d5761061c610d23565b5b6002544261062b919061136e565b6040517f83a5369c00000000000000000000000000000000000000000000000000000000815260040161066194939291906113a2565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561068f5761068e610d23565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610759959493929190611423565b6020604051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c919061148b565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60006003905090565b6000606060007f000000000000000000000000000000000000000000000000000000000000000060025442610842919061136e565b119050600080600181111561085a57610859610d23565b5b600160149054906101000a900460ff16600181111561087c5761087b610d23565b5b1490506000806000805490501190506000804711905083801561089c5750825b80156108a55750815b80156108ae5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108f6576108f56114b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610959576109586114b8565b5b602002602001015161096b9190611516565b905060008181548110610981576109806114b8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a1257610a11610d23565b5b021790555042600281905550600067ffffffffffffffff811115610a3957610a38610e0b565b5b604051908082528060200260200182016040528015610a675781602001602082028036833780820191505090505b5060009080519060200190610a7d929190610bae565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610ac690611578565b60006040518083038185875af1925050503d8060008114610b03576040519150601f19603f3d011682016040523d82523d6000602084013e610b08565b606091505b5050905080610b43576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610c27579160200282015b82811115610c265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bce565b5b509050610c349190610c38565b5090565b5b80821115610c51576000816000905550600101610c39565b5090565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610cce610cc9610cc484610c89565b610ca9565b610c89565b9050919050565b6000610ce082610cb3565b9050919050565b6000610cf282610cd5565b9050919050565b610d0281610ce7565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6357610d62610d23565b5b50565b6000819050610d7482610d52565b919050565b6000610d8482610d66565b9050919050565b610d9481610d79565b82525050565b6000602082019050610daf6000830184610d8b565b92915050565b6000604051905090565b600080fd5b600080fd5b610dd281610c55565b8114610ddd57600080fd5b50565b600081359050610def81610dc9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4382610dfa565b810181811067ffffffffffffffff82111715610e6257610e61610e0b565b5b80604052505050565b6000610e75610db5565b9050610e818282610e3a565b919050565b600067ffffffffffffffff821115610ea157610ea0610e0b565b5b602082029050602081019050919050565b600080fd5b6000610eca610ec584610e86565b610e6b565b90508083825260208201905060208402830185811115610eed57610eec610eb2565b5b835b81811015610f165780610f028882610de0565b845260208401935050602081019050610eef565b5050509392505050565b600082601f830112610f3557610f34610df5565b5b8135610f45848260208601610eb7565b91505092915050565b60008060408385031215610f6557610f64610dbf565b5b6000610f7385828601610de0565b925050602083013567ffffffffffffffff811115610f9457610f93610dc4565b5b610fa085828601610f20565b9150509250929050565b600080fd5b60008083601f840112610fc557610fc4610df5565b5b8235905067ffffffffffffffff811115610fe257610fe1610faa565b5b602083019150836001820283011115610ffe57610ffd610eb2565b5b9250929050565b6000806020838503121561101c5761101b610dbf565b5b600083013567ffffffffffffffff81111561103a57611039610dc4565b5b61104685828601610faf565b92509250509250929050565b600061105d82610c89565b9050919050565b61106d81611052565b82525050565b60006020820190506110886000830184611064565b92915050565b600063ffffffff82169050919050565b6110a78161108e565b82525050565b60006020820190506110c2600083018461109e565b92915050565b600061ffff82169050919050565b6110df816110c8565b82525050565b60006020820190506110fa60008301846110d6565b92915050565b600080fd5b600067ffffffffffffffff8211156111205761111f610e0b565b5b61112982610dfa565b9050602081019050919050565b82818337600083830152505050565b600061115861115384611105565b610e6b565b90508281526020810184848401111561117457611173611100565b5b61117f848285611136565b509392505050565b600082601f83011261119c5761119b610df5565b5b81356111ac848260208601611145565b91505092915050565b6000602082840312156111cb576111ca610dbf565b5b600082013567ffffffffffffffff8111156111e9576111e8610dc4565b5b6111f584828501611187565b91505092915050565b60008115159050919050565b611213816111fe565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611253578082015181840152602081019050611238565b60008484015250505050565b600061126a82611219565b6112748185611224565b9350611284818560208601611235565b61128d81610dfa565b840191505092915050565b60006040820190506112ad600083018561120a565b81810360208301526112bf818461125f565b90509392505050565b6000602082840312156112de576112dd610dbf565b5b60006112ec84828501610de0565b91505092915050565b600061130082610c89565b9050919050565b611310816112f5565b82525050565b600060408201905061132b6000830185611307565b6113386020830184611307565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137982610c55565b915061138483610c55565b925082820390508181111561139c5761139b61133f565b5b92915050565b60006080820190506113b76000830187610c5f565b6113c46020830186610c5f565b6113d16040830185610c5f565b6113de6060830184610c5f565b95945050505050565b6000819050919050565b6113fa816113e7565b82525050565b600067ffffffffffffffff82169050919050565b61141d81611400565b82525050565b600060a08201905061143860008301886113f1565b6114456020830187611414565b61145260408301866110d6565b61145f606083018561109e565b61146c608083018461109e565b9695505050505050565b60008151905061148581610dc9565b92915050565b6000602082840312156114a1576114a0610dbf565b5b60006114af84828501611476565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061152182610c55565b915061152c83610c55565b92508261153c5761153b6114e7565b5b828206905092915050565b600081905092915050565b50565b6000611562600083611547565b915061156d82611552565b600082019050919050565b600061158382611555565b915081905091905056fea26469706673582212202b03a36e0da244741a44a9ae472bb37e485c1a8a0eef628a648c633384b57f6e64736f6c63430008110033",
  "devdoc": {
    "author": "Li Zhengxing",
    "details": "使用了 chainlink VRF & Keeper",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "keeper用户合约中需要重写的函数，用来表示自动化执行的条件 判断条件为： 1、超过定的固定时间段 2、至少有一名玩家，并且有 ETH 3、订阅里面应该有足够的 LINK 4、抽奖的状态应该是“Open”"
      },
      "performUpkeep(bytes)": {
        "details": "keeper用户合约中需要重写的函数，upkeepNeeded为真时，会执行以下逻辑 选择随机获胜者 -- chainlink vrf"
      }
    },
    "title": "抽奖合约",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "这个合约用于创建一个区中心化的智能合约",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1168,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1188,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1163"
      },
      {
        "astId": 1190,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1163": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}